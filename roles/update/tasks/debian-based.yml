---

- name:             check for squid-deb-proxy-client pressence
  stat:             path=/usr/share/squid-deb-proxy-client/apt-avahi-discover
  register:         squiddeb_statuscheck
  changed_when:     false

- name:             make a copy off the http discover script to use for https
  shell:            /bin/cp /usr/share/squid-deb-proxy-client/apt-avahi-discover /usr/share/squid-deb-proxy-client/apt-avahi-discover-https
                    creates="/usr/share/squid-deb-proxy-client/apt-avahi-discover-https"
  when:             squiddeb_statuscheck.stat.exists

- name:             replace http with https in our new script
  lineinfile:       path=/usr/share/squid-deb-proxy-client/apt-avahi-discover-https
                    regexp="{{ item.regexp }}"
                    line="{{ item.line }}"
                    backrefs=yes
  when:             squiddeb_statuscheck.stat.exists
  with_items:
    - {regexp: '            print "http:(.*)', line: '            print "https:\1'}
    - {regexp: '            print "http:(.*)', line: '            print "https:\1'}

- name:             add https discovery to squid-deb-proxy-client's apt config
  lineinfile:       path=/etc/apt/apt.conf.d/30autoproxy
                    line='Acquire::https::Proxy-Auto-Detect "/usr/share/squid-deb-proxy-client/apt-avahi-discover-https";'
                    state=present
  when:             squiddeb_statuscheck.stat.exists and ansible_distribution_release != 'bionic'

- name:             update packages list
  apt:              update_cache=yes
  when:             ansible_date_time.epoch|int - update_statuscheck.stat.mtime|int > 3600

- name:             install some tools
  apt:              name={{ item }} state=present
  with_items:       '{{ install_tools }}'
  when:             install_tools is defined

- name:             install development packages
  apt:              name={{ item }} state=present
  with_items:       '{{ install_dev }}'
  when:             install_dev is defined

- name:             check for python pip
  shell:            which pip
  changed_when:     false
  register:         check_pip

- name:             ensure pip is the latest version
  pip:              name={{ item }} state=latest
  when:             check_pip.rc == 0
  with_items:
    - pip
    - setuptools

- name:             install python packages thru pip
  pip:              name={{ item }} state=present umask=0022
  with_items:       '{{ install_dev_pip }}'
  when:             install_dev_pip is defined and check_pip.rc == 0

- name:             install mongodb specific packages
  apt:              name=python-pymongo state=present
  when:             inventory_hostname in groups['mongodb']|default([])

- name:             install postfix specific packages
  apt:              name=python-pymongo state=present
  when:             inventory_hostname in groups['postfix']|default([])

- name:             remove unwanted packages
  apt:              name={{ item }} state=absent
  with_items:       '{{ uninstall_unwanted }}'
  when:             uninstall_unwanted is defined

- name:             list packages to upgrade (1/2)
  shell:            aptitude -q -F%p --disable-columns search "~U"
  register:         updates
  changed_when:     false
  when:             ansible_distribution_release == "precise" or ansible_distribution_release == "trusty"

- name:             list packages to upgrade (1/2)
  shell:            apt list --upgradeable 2>/dev/null | sed '1d'
  register:         updates
  changed_when:     false
  when:             ansible_distribution_release != "precise" and ansible_distribution_release != "trusty"

- name:             list packages to upgrade (2/2)
  debug:            msg="{{ updates.stdout_lines | count }} packages to upgrade ({{ updates.stdout_lines | join(', ') }})"
  when:             updates.stdout_lines

- name:             update packages
  apt:              upgrade=safe force_apt_get=yes
#  when:             ansible_date_time.epoch|int - update_statuscheck.stat.mtime|int > 3600
#  ^ uncomment to only run updates once an hour at minimum

- name:             Check what the new version is
  shell:            lsb_release -r | awk '{print $2}'
  changed_when:     false
  register:         new_release

- name:             Notify distribution version upgrade
  debug:            msg="Ubuntu has been upgraded from {{ ansible_lsb.release }} to {{ new_release.stdout }}"
  when:             ansible_lsb.release != new_release.stdout

- name:             List services to restart (1/2)
  shell:            checkrestart | grep ^service | awk '{print $2}'
  register:         services
  changed_when:     false

- name:             List services to restart (2/2)
  debug:            msg="{{ services.stdout_lines | count }} services to restart ({{ services.stdout_lines | join (', ') }})"
  when:             services.stdout_lines

- name:             touch status file
  file:             path=/root/._ansible state=touch
  changed_when:     false

- name:             check unattended-upgrades
  shell:            /usr/bin/debconf-show unattended-upgrades 2>/dev/null | grep "enable_auto_updates"
  register:         update_unattendedcheck
  failed_when:      false
  changed_when:     false

- name:             unattended-upgrades/enable_auto_updates -- preseed debconf
  copy:             src=preseed_unattended-upgrades dest=/root/tmp/debconf.preseed force=yes
  when:             'update_unattendedcheck.stdout != "* unattended-upgrades/enable_auto_updates: true"'

- name:             unattended-upgrades/enable_auto_updates -- run debconf
  shell:            /usr/bin/debconf-set-selections /root/tmp/debconf.preseed
  when:             'update_unattendedcheck.stdout != "* unattended-upgrades/enable_auto_updates: true"'

- name:             unattended-upgrades/enable_auto_updates -- process preseed
  shell:            /usr/sbin/dpkg-reconfigure -fnoninteractive unattended-upgrades
  when:             'update_unattendedcheck.stdout != "* unattended-upgrades/enable_auto_updates: true"'

- name:             unattended-upgrades/enable_auto_updates -- cleanup preseed
  file:             path=/root/tmp/debconf.preseed state=absent
  when:             'update_unattendedcheck.stdout != "* unattended-upgrades/enable_auto_updates: true"'

- name:             enable automatic reboot in unattended-upgrades
  replace:          path=/etc/apt/apt.conf.d/50unattended-upgrades
                    regexp="^//[\s]?{{ item.key }}[\s+](.*)$"
                    replace="{{ item.key }} {{ item.value }};"
  with_items:
    - { key: 'Unattended-Upgrade::Automatic-Reboot', value: '"true"' }
    - { key: 'Unattended-Upgrade::Automatic-Reboot-Time', value: '"03:00"' }
  when:             "'monitor' not in group_names"
